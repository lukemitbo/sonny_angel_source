name: ci-cd

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write   # needed for OIDC
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  ECR_REPO: ${{ vars.ECR_REPO }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps & run tests
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -d tests ]; then pytest -q || exit 1; fi

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/GitHubOIDCDeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image
        run: |
          cd llm-rag-service
          IMAGE_REGISTRY="${{ steps.ecr.outputs.registry }}"
          IMAGE_URI="${IMAGE_REGISTRY}/${{ env.ECR_REPO }}"
          GIT_SHA="$(git rev-parse --short HEAD)"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          echo "GIT_SHA=$GIT_SHA" >> $GITHUB_ENV

          docker build -t "${IMAGE_URI}:latest" -t "${IMAGE_URI}:${GIT_SHA}" .
          docker push "${IMAGE_URI}:latest"
          docker push "${IMAGE_URI}:${GIT_SHA}"

      - name: Force new ECS deployment
        run: |
          aws ecs update-service \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --service "${{ env.ECS_SERVICE }}" \
            --force-new-deployment
